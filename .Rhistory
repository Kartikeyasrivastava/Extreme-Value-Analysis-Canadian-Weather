margin = margin(10, 0, 10, 0))) + theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + theme(axis.text.y=element_text(angle=0, size=12, vjust=0.5)) + theme(
axis.title.x = element_text(size = 14,color="black", vjust=-0.35),
axis.title.y = element_text(size = 14,color="black" , vjust=0.35)
)
ggplot(df, aes(x=Date_Time, y= Total_Rain_mm)) + geom_point() + xlab("Date") + ylab("Pr√©cipitations de pluie") + ggtitle("McGill temperature") #+ geom_abline(intercept = mod$coefficients[1], slope = mod$coefficients[2], color="red")
df_max_07 <- df_temperature_07 %>% group_by(Year)  %>% summarise(.,max = max(Max_Temp))
df_max_07
#compute MLEs with different library
model <- gevFit(df_max_07$max)
model@fit$par.ests
model@fit$par.ses
#Compute the MLEs
model1 <- fgev(x=df_max_07$max)
model1$estimate
model1$std.err
make_CI_mle <- function(MLEs,st_err){
Lower = list()
Upper = list()
for(i in 1:length(MLEs)){
low <- MLEs[i] - 1.96 * st_err[i]
up <- MLEs[i] + 1.96 * st_err[i]
Lower[length(Lower)+1] <- low
Upper[length(Upper)+1] <- up
}
table <- cbind(MLEs,Lower,Upper)
print(table)
}
#confidence intervals for the MLEs
make_CI_mle(model1$estimate,model1$std.err)
mu <- model1$estimate[1]
sig <- model1$estimate[2]
xi <- model1$estimate[3]
p = 1/5
Zp_5 <- mu - (sig/xi)*(1-(-log(1-p))^(-1*xi))
Zp_5
#10 year return level
p = 1/10
Zp_10 <- mu - (sig/xi)*(1-(-log(1-p))^(-1*xi))
Zp_10
#100 year return level
p = 1/100
Zp_100 <- mu - (sig/xi)*(1-(-log(1-p))^(-1*xi))
Zp_100
Z_0 = mu - sig/xi
Z_0
#Compute variance of Zp for 10-year return level
p = 1/10
a <- (-1/xi)*(1-(-log(1-p))^(-1*xi))
yp = -log(1-p)
b <-  (sig / (xi^2)) * (1 - yp^(-1*xi)) - (sig / (xi)) * ( yp^(-1*xi)) * log(yp)
grad_Zp <- c(1, a, b)
var_Zp_10 <- t(grad_Zp) %*% model1$var.cov %*% grad_Zp
var_Zp_10
#Compute variance of Zp for 10-year return level
p = 1/100
a <- (-1/xi)*(1-(-log(1-p))^(-1*xi))
yp = -log(1-p)
b <-  (sig / (xi^2)) * (1 - yp^(-1*xi)) - (sig / (xi)) * ( yp^(-1*xi)) * log(yp)
grad_Zp <- c(1, a, b)
var_Zp_100 <- t(grad_Zp) %*% model1$var.cov %*% grad_Zp
var_Zp_100
#Compute variance of Zp for inf-year return level
a <- (-1/xi)
b <-  (sig / (xi^2))
grad_Zp <- c(1, a, b)
var_Z_0 <- t(grad_Zp) %*% model1$var.cov %*% grad_Zp
var_Z_0
low_10 <- Zp_10 - 1.96 * sqrt(var_Zp_10)
up_10 <- Zp_10 + 1.96 * sqrt(var_Zp_10)
print(paste0("95% CI for Zp_10: [",low_10,",",up_10,"]"))
1.96*sqrt(var_Zp_10)
low_100 <- Zp_100 - 1.96 * sqrt(var_Zp_100)
up_100 <- Zp_100 + 1.96 * sqrt(var_Zp_100)
print(paste0("95% CI for Zp_100: [",low_100,",",up_100,"]"))
1.96*sqrt(var_Zp_100)
low_0 <- Z_0 - 1.96 * sqrt(var_Z_0)
up_0 <- Z_0 + 1.96 * sqrt(var_Z_0)
print(paste0("95% CI for Z_inf: [",low_0,",",up_0,"]"))
1.96*sqrt(var_Z_0)
#QUANTILE PLOT FOR BLOCK MAXIMA
z <- sort(df_max_07$max)
index <- c(1:length(z))
G_inv_zi <- mu - (sig/xi)*(1-(-log(index/(length(z)+1)))^(-1*xi))
df_quantile_plot <- data.frame(cbind(index,z,G_inv_zi))
ggplot(df_quantile_plot, aes(x=z, y= G_inv_zi)) + geom_point() + xlab("Ordered block maxima") + ylab("Estimated inverse function G") + ggtitle("Quantile Plot for the Block Maxima Approach") + geom_abline(intercept = 0, slope = 1, color="firebrick") + theme(plot.title = element_text(size=20, face="bold",
margin = margin(10, 0, 10, 0))) + theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + theme(axis.text.y=element_text(angle=0, size=12, vjust=0.5)) + theme(
axis.title.x = element_text(size = 14,color="black", vjust=-0.35),
axis.title.y = element_text(size = 14,color="black" , vjust=0.35)
)
df_rank <-  df_temperature_07[c(6,10)] %>% group_by(Year)  %>% mutate(., rank = rank(desc(Max_Temp))) %>% arrange(Year,rank)
df_rank
k <- 20
rank_k <- df_rank %>% dplyr::filter(.,rank<=k+0.5) %>% mutate(rank_mod = ifelse(rank %% 1 == 0, rank, rank-0.5)) %>% dplyr::select(.,Year,rank_mod,Max_Temp) %>% distinct(.) %>% pivot_wider(.,names_from=rank_mod, values_from = Max_Temp)
rank_k
for(i in 1:nrow(rank_k)){
if(is.na(rank_k[['1']][i])){
for( j in 1:ncol(rank_k)){
if(is.na(rank_k[[toString(j)]][i])){
} else{
rank_k[['1']][i] <- rank_k[[toString(j)]][i]
break
}
}
next
}
}
rank_k
for(i in 1:nrow(rank_k)){
for( j in 2:(ncol(rank_k)-1)){
if(is.na(rank_k[[toString(j)]][i])){
rank_k[[toString(j)]][i] <- rank_k[[toString(j-1)]][i]
}else{
}
}
}
names <- c("Year")
for(i in 1:k){
names[i+1] <- toString(i)
}
rank_k <- data.frame(as.matrix(rank_k[,names]))
rank_k
r_1 <- rlarg.fit(rank_k[,-1],r=1)
r_2 <- rlarg.fit(rank_k[,-1],r=2)
r_3 <- rlarg.fit(rank_k[,-1],r=3)
r_4 <- rlarg.fit(rank_k[,-1],r=4)
r_5 <- rlarg.fit(rank_k[,-1],r=5)
r_6 <- rlarg.fit(rank_k[,-1],r=6)
r_7 <- rlarg.fit(rank_k[,-1],r=7)
r_8 <- rlarg.fit(rank_k[,-1],r=8)
r_9 <- rlarg.fit(rank_k[,-1],r=9)
r_10 <- rlarg.fit(rank_k[,-1],r=10)
mu <- r_2$mle[1]
sig <- r_2$mle[2]
xi <- r_2$mle[3]
p = 1/5
Zp_5 <- mu - (sig/xi)*(1-(-log(1-p))^(-1*xi))
Zp_5
#10 year return level
p = 1/10
Zp_10 <- mu - (sig/xi)*(1-(-log(1-p))^(-1*xi))
Zp_10
#100 year return level
p = 1/100
Zp_100 <- mu - (sig/xi)*(1-(-log(1-p))^(-1*xi))
Zp_100
Z_0 = mu - sig/xi
Z_0
#Compute variance of Zp for 10-year return level
p = 1/10
a <- (-1/xi)*(1-(-log(1-p))^(-1*xi))
yp = -log(1-p)
b <-  (sig / (xi^2)) * (1 - yp^(-1*xi)) - (sig / (xi)) * ( yp^(-1*xi)) * log(yp)
grad_Zp <- c(1, a, b)
var_Zp_10 <- t(grad_Zp) %*% r_2$cov %*% grad_Zp
var_Zp_10
#Compute variance of Zp for 10-year return level
p = 1/100
a <- (-1/xi)*(1-(-log(1-p))^(-1*xi))
yp = -log(1-p)
b <-  (sig / (xi^2)) * (1 - yp^(-1*xi)) - (sig / (xi)) * ( yp^(-1*xi)) * log(yp)
grad_Zp <- c(1, a, b)
var_Zp_100 <- t(grad_Zp) %*% r_2$cov %*% grad_Zp
var_Zp_100
#Compute variance of Zp for inf-year return level
a <- (-1/xi)
b <-  (sig / (xi^2))
grad_Zp <- c(1, a, b)
var_Z_0 <- t(grad_Zp) %*% r_2$cov %*% grad_Zp
var_Z_0
low_10 <- Zp_10 - 1.96 * sqrt(var_Zp_10)
up_10 <- Zp_10 + 1.96 * sqrt(var_Zp_10)
print(paste0("95% CI for Zp_10: [",low_10,",",up_10,"]"))
1.96*sqrt(var_Zp_10)
low_100 <- Zp_100 - 1.96 * sqrt(var_Zp_100)
up_100 <- Zp_100 + 1.96 * sqrt(var_Zp_100)
print(paste0("95% CI for Zp_100: [",low_100,",",up_100,"]"))
1.96*sqrt(var_Zp_100)
low_0 <- Z_0 - 1.96 * sqrt(var_Z_0)
up_0 <- Z_0 + 1.96 * sqrt(var_Z_0)
print(paste0("95% CI for Z_inf: [",low_0,",",up_0,"]"))
1.96*sqrt(var_Z_0)
mu <- r_3$mle[1]
sig <- r_3$mle[2]
xi <- r_3$mle[3]
p = 1/5
Zp_5 <- mu - (sig/xi)*(1-(-log(1-p))^(-1*xi))
Zp_5
#10 year return level
p = 1/10
Zp_10 <- mu - (sig/xi)*(1-(-log(1-p))^(-1*xi))
Zp_10
#100 year return level
p = 1/100
Zp_100 <- mu - (sig/xi)*(1-(-log(1-p))^(-1*xi))
Zp_100
Z_0 = mu - sig/xi
Z_0
#Compute variance of Zp for 10-year return level
p = 1/10
a <- (-1/xi)*(1-(-log(1-p))^(-1*xi))
yp = -log(1-p)
b <-  (sig / (xi^2)) * (1 - yp^(-1*xi)) - (sig / (xi)) * ( yp^(-1*xi)) * log(yp)
grad_Zp <- c(1, a, b)
var_Zp_10 <- t(grad_Zp) %*% r_3$cov %*% grad_Zp
var_Zp_10
#Compute variance of Zp for 10-year return level
p = 1/100
a <- (-1/xi)*(1-(-log(1-p))^(-1*xi))
yp = -log(1-p)
b <-  (sig / (xi^2)) * (1 - yp^(-1*xi)) - (sig / (xi)) * ( yp^(-1*xi)) * log(yp)
grad_Zp <- c(1, a, b)
var_Zp_100 <- t(grad_Zp) %*% r_3$cov %*% grad_Zp
var_Zp_100
#Compute variance of Zp for inf-year return level
a <- (-1/xi)
b <-  (sig / (xi^2))
grad_Zp <- c(1, a, b)
var_Z_0 <- t(grad_Zp) %*% r_3$cov %*% grad_Zp
var_Z_0
low_10 <- Zp_10 - 1.96 * sqrt(var_Zp_10)
up_10 <- Zp_10 + 1.96 * sqrt(var_Zp_10)
print(paste0("95% CI for Zp_10: [",low_10,",",up_10,"]"))
1.96*sqrt(var_Zp_10)
low_100 <- Zp_100 - 1.96 * sqrt(var_Zp_100)
up_100 <- Zp_100 + 1.96 * sqrt(var_Zp_100)
print(paste0("95% CI for Zp_100: [",low_100,",",up_100,"]"))
1.96*sqrt(var_Zp_100)
low_0 <- Z_0 - 1.96 * sqrt(var_Z_0)
up_0 <- Z_0 + 1.96 * sqrt(var_Z_0)
print(paste0("95% CI for Z_inf: [",low_0,",",up_0,"]"))
1.96*sqrt(var_Z_0)
#QUANTILE PLOT FOR BLOCK MAXIMA
mu <- r_1$mle[1]
sig <- r_1$mle[2]
xi <- r_1$mle[3]
z <- sort(df_max_07$max)
index <- c(1:length(z))
G_inv_zi <- mu - (sig/xi)*(1-(-log(index/(length(z)+1)))^(-1*xi))
df_quantile_plot <- data.frame(cbind(index,z,G_inv_zi))
ggplot(df_quantile_plot, aes(x=z, y= G_inv_zi)) + geom_point() + xlab("Ordered block maxima") + ylab("Estimated inverse function G") + ggtitle("Quantile Plot for the r-Largest Order Statistics (r=1)") + geom_abline(intercept = 0, slope = 1, color="firebrick") + theme(plot.title = element_text(size=18, face="bold",
margin = margin(10, 0, 10, 0))) + theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + theme(axis.text.y=element_text(angle=0, size=12, vjust=0.5)) + theme(
axis.title.x = element_text(size = 14,color="black", vjust=-0.35),
axis.title.y = element_text(size = 14,color="black" , vjust=0.35)
)
#QUANTILE PLOT FOR BLOCK MAXIMA
mu <- r_2$mle[1]
sig <- r_2$mle[2]
xi <- r_2$mle[3]
z <- sort(df_max_07$max)
index <- c(1:length(z))
G_inv_zi <- mu - (sig/xi)*(1-(-log(index/(length(z)+1)))^(-1*xi))
df_quantile_plot <- data.frame(cbind(index,z,G_inv_zi))
ggplot(df_quantile_plot, aes(x=z, y= G_inv_zi)) + geom_point() + xlab("Ordered block maxima") + ylab("Estimated inverse function G") + ggtitle("Quantile Plot for the r-Largest Order Statistics (r=2)") + geom_abline(intercept = 0, slope = 1, color="firebrick") + theme(plot.title = element_text(size=18, face="bold",
margin = margin(10, 0, 10, 0))) + theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + theme(axis.text.y=element_text(angle=0, size=12, vjust=0.5)) + theme(
axis.title.x = element_text(size = 14,color="black", vjust=-0.35),
axis.title.y = element_text(size = 14,color="black" , vjust=0.35)
)
#QUANTILE PLOT FOR BLOCK MAXIMA
mu <- r_3$mle[1]
sig <- r_3$mle[2]
xi <- r_3$mle[3]
z <- sort(df_max_07$max)
index <- c(1:length(z))
G_inv_zi <- mu - (sig/xi)*(1-(-log(index/(length(z)+1)))^(-1*xi))
df_quantile_plot <- data.frame(cbind(index,z,G_inv_zi))
ggplot(df_quantile_plot, aes(x=z, y= G_inv_zi)) + geom_point() + xlab("Ordered block maxima") + ylab("Estimated inverse function G") + ggtitle("Quantile Plot for the r-Largest Order Statistics (r=3)") + geom_abline(intercept = 0, slope = 1, color="firebrick") + theme(plot.title = element_text(size=18, face="bold",
margin = margin(10, 0, 10, 0))) + theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + theme(axis.text.y=element_text(angle=0, size=12, vjust=0.5)) + theme(
axis.title.x = element_text(size = 14,color="black", vjust=-0.35),
axis.title.y = element_text(size = 14,color="black" , vjust=0.35)
)
fit_mod <- function(x){
scale = c()
shape = c()
for(i in 50:64){
mod = gpdFit(x, u = i/2.0)
shape[length(shape)+1] <- mod@fit$par.ests[1]
scale[length(scale)+1] <- mod@fit$par.ests[2]
}
df = data.frame(cbind(50:64)/2.0,scale,shape)
names(df) <- c("u","scale","shape")
return(df)
}
obs <- df_temperature_07$Max_Temp
df <- fit_mod(obs)
df
u_0 <- 29
df_mod <- df %>% dplyr::filter(.,u>u_0)
mod_scale <- lm(scale ~ u, df_mod)
summary(mod_scale)
title <- paste0("Scale Parameter")
ggplot(df, aes(x=u, y= scale)) + geom_line() + xlab("Threshold u") + ylab("Scale MLE value") + ggtitle(title) + theme(plot.title = element_text(size=18, face="bold",
margin = margin(10, 0, 10, 0))) + theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + theme(axis.text.y=element_text(angle=0, size=12, vjust=0.5)) + theme(
axis.title.x = element_text(size = 14,color="black", vjust=-0.35),
axis.title.y = element_text(size = 14,color="black" , vjust=0.35)
) + geom_abline(intercept = mod_scale$coefficients[1], slope = mod_scale$coefficients[2], color="firebrick")
df_mod <- df %>% dplyr::filter(.,u>u_0)
mod_shape <- lm(shape ~ u, df_mod)
summary(mod_shape)
title <- paste0("Shape Parameter")
ggplot(df, aes(x=u, y= shape)) + geom_line() + xlab("Threshold u") + ylab("Shape MLE value")  + ggtitle(title) + theme(plot.title = element_text(size=18, face="bold",
margin = margin(10, 0, 10, 0))) + theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + theme(axis.text.y=element_text(angle=0, size=12, vjust=0.5)) + theme(
axis.title.x = element_text(size = 14,color="black", vjust=-0.35),
axis.title.y = element_text(size = 14,color="black" , vjust=0.35)
) + geom_abline(intercept = mod_shape$coefficients[1], slope = mod_shape$coefficients[2], color="firebrick")
mrlplot(obs, tlim = c(26,32), nt = 20,
p.or.n = FALSE, alpha = 0.05, ylim = NULL,
legend.loc = "bottomleft", main = "Mean Residual Life Plot", xlab = "Threshold u",
ylab = "Mean Excess")
mrlplot(obs, tlim = c(26,31), nt = 20,
p.or.n = FALSE, alpha = 0.05, ylim = NULL,
legend.loc = "bottomleft", try.thresh = u_0, main = "Mean Residual Life Plot", xlab = "Threshold u",
ylab = "Mean Excess")
mod = gpdFit(obs, u = u_0)
V <- mod@fit$varcov
V[1,1] <- mod@fit$varcov[2,2]
V[2,2] <- mod@fit$varcov[1,1]
V
mod@fit$par.ests
mod@fit$par.ses
sig <- mod@fit$par.ests[2]
xi <- mod@fit$par.ests[1]
m <- 10*365
sampl_prop <- length(obs[obs>u_0])/length(obs)
sampl_prop
A <- matrix(rep(0,9),nrow=3,ncol=3)
A[2:3,2:3] <- V
A[1,1] <- sampl_prop*(1-sampl_prop)/length(obs)
A
x_m <- u_0 + (sig/xi)*((m*sampl_prop)^xi -1)
x_m
d_samp <- sig*(m^xi)*(sampl_prop^(xi-1))
d_sig <- (xi^(-1))*(((m*sampl_prop)^xi) -1)
d_xi <- -1*(sig/(xi^2))*(((m*sampl_prop)^xi) -1) + (sig/xi)*((m*sampl_prop)^xi)*log(m*sampl_prop)
grad <- c(d_samp,d_sig,d_xi)
sd_err <- sqrt(t(grad) %*% A %*% grad)
x_m - 1.96 * sd_err
x_m + 1.96 * sd_err
1.96*sd_err
sig <- mod@fit$par.ests[2]
xi <- mod@fit$par.ests[1]
m <- 100*365
sampl_prop <- length(obs[obs>u_0])/length(obs)
sampl_prop
A <- matrix(rep(0,9),nrow=3,ncol=3)
A[2:3,2:3] <- V
A[1,1] <- sampl_prop*(1-sampl_prop)/length(obs)
A
x_m <- u_0 + (sig/xi)*((m*sampl_prop)^xi -1)
x_m
d_samp <- sig*(m^xi)*(sampl_prop^(xi-1))
d_sig <- (xi^(-1))*(((m*sampl_prop)^xi) -1)
d_xi <- -1*(sig/(xi^2))*(((m*sampl_prop)^xi) -1) + (sig/xi)*((m*sampl_prop)^xi)*log(m*sampl_prop)
grad <- c(d_samp,d_sig,d_xi)
sd_err <- sqrt(t(grad) %*% A %*% grad)
x_m - 1.96 * sd_err
x_m + 1.96 * sd_err
1.96*sd_err
u_0 <- 28
df_mod <- df %>% dplyr::filter(.,u>u_0)
mod_scale <- lm(scale ~ u, df_mod)
summary(mod_scale)
title <- paste0("Scale Parameter")
ggplot(df, aes(x=u, y= scale)) + geom_line() + xlab("Threshold u") + ylab("Scale MLE value") + ggtitle(title) + theme(plot.title = element_text(size=18, face="bold",
margin = margin(10, 0, 10, 0))) + theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + theme(axis.text.y=element_text(angle=0, size=12, vjust=0.5)) + theme(
axis.title.x = element_text(size = 14,color="black", vjust=-0.35),
axis.title.y = element_text(size = 14,color="black" , vjust=0.35)
) + geom_abline(intercept = mod_scale$coefficients[1], slope = mod_scale$coefficients[2], color="firebrick")
df_mod <- df %>% dplyr::filter(.,u>u_0)
mod_shape <- lm(shape ~ u, df_mod)
summary(mod_shape)
title <- paste0("Shape Parameter")
ggplot(df, aes(x=u, y= shape)) + geom_line() + xlab("Threshold u") + ylab("Shape MLE value")  + ggtitle(title) + theme(plot.title = element_text(size=18, face="bold",
margin = margin(10, 0, 10, 0))) + theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + theme(axis.text.y=element_text(angle=0, size=12, vjust=0.5)) + theme(
axis.title.x = element_text(size = 14,color="black", vjust=-0.35),
axis.title.y = element_text(size = 14,color="black" , vjust=0.35)
) + geom_abline(intercept = mod_shape$coefficients[1], slope = mod_shape$coefficients[2], color="firebrick")
mrlplot(obs, tlim = c(26,32), nt = 20,
p.or.n = FALSE, alpha = 0.05, ylim = NULL,
legend.loc = "bottomleft", main = "Mean Residual Life Plot", xlab = "Threshold u",
ylab = "Mean Excess")
mrlplot(obs, tlim = c(26,31), nt = 20,
p.or.n = FALSE, alpha = 0.05, ylim = NULL,
legend.loc = "bottomleft", try.thresh = u_0, main = "Mean Residual Life Plot", xlab = "Threshold u",
ylab = "Mean Excess")
mod = gpdFit(obs, u = u_0)
V <- mod@fit$varcov
V[1,1] <- mod@fit$varcov[2,2]
V[2,2] <- mod@fit$varcov[1,1]
V
mod@fit$par.ests
mod@fit$par.ses
sig <- mod@fit$par.ests[2]
xi <- mod@fit$par.ests[1]
m <- 10*365
sampl_prop <- length(obs[obs>u_0])/length(obs)
sampl_prop
A <- matrix(rep(0,9),nrow=3,ncol=3)
A[2:3,2:3] <- V
A[1,1] <- sampl_prop*(1-sampl_prop)/length(obs)
A
x_m <- u_0 + (sig/xi)*((m*sampl_prop)^xi -1)
x_m
d_samp <- sig*(m^xi)*(sampl_prop^(xi-1))
d_sig <- (xi^(-1))*(((m*sampl_prop)^xi) -1)
d_xi <- -1*(sig/(xi^2))*(((m*sampl_prop)^xi) -1) + (sig/xi)*((m*sampl_prop)^xi)*log(m*sampl_prop)
grad <- c(d_samp,d_sig,d_xi)
sd_err <- sqrt(t(grad) %*% A %*% grad)
x_m - 1.96 * sd_err
x_m + 1.96 * sd_err
1.96*sd_err
sig <- mod@fit$par.ests[2]
xi <- mod@fit$par.ests[1]
m <- 100*365
sampl_prop <- length(obs[obs>u_0])/length(obs)
sampl_prop
A <- matrix(rep(0,9),nrow=3,ncol=3)
A[2:3,2:3] <- V
A[1,1] <- sampl_prop*(1-sampl_prop)/length(obs)
A
A <- matrix(rep(0,9),nrow=3,ncol=3)
A[2:3,2:3] <- V
A[1,1] <- sampl_prop*(1-sampl_prop)/length(obs)
A
x_m <- u_0 + (sig/xi)*((m*sampl_prop)^xi -1)
x_m
d_samp <- sig*(m^xi)*(sampl_prop^(xi-1))
d_sig <- (xi^(-1))*(((m*sampl_prop)^xi) -1)
d_xi <- -1*(sig/(xi^2))*(((m*sampl_prop)^xi) -1) + (sig/xi)*((m*sampl_prop)^xi)*log(m*sampl_prop)
grad <- c(d_samp,d_sig,d_xi)
sd_err <- sqrt(t(grad) %*% A %*% grad)
x_m - 1.96 * sd_err
x_m + 1.96 * sd_err
1.96*sd_err
u_0 <- 30
df_mod <- df %>% dplyr::filter(.,u>u_0)
mod_scale <- lm(scale ~ u, df_mod)
summary(mod_scale)
title <- paste0("Scale Parameter")
ggplot(df, aes(x=u, y= scale)) + geom_line() + xlab("Threshold u") + ylab("Scale MLE value") + ggtitle(title) + theme(plot.title = element_text(size=18, face="bold",
margin = margin(10, 0, 10, 0))) + theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + theme(axis.text.y=element_text(angle=0, size=12, vjust=0.5)) + theme(
axis.title.x = element_text(size = 14,color="black", vjust=-0.35),
axis.title.y = element_text(size = 14,color="black" , vjust=0.35)
) + geom_abline(intercept = mod_scale$coefficients[1], slope = mod_scale$coefficients[2], color="firebrick")
df_mod <- df %>% dplyr::filter(.,u>u_0)
mod_shape <- lm(shape ~ u, df_mod)
summary(mod_shape)
title <- paste0("Shape Parameter")
ggplot(df, aes(x=u, y= shape)) + geom_line() + xlab("Threshold u") + ylab("Shape MLE value")  + ggtitle(title) + theme(plot.title = element_text(size=18, face="bold",
margin = margin(10, 0, 10, 0))) + theme(axis.text.x=element_text(angle=0, size=12, vjust=0.5)) + theme(axis.text.y=element_text(angle=0, size=12, vjust=0.5)) + theme(
axis.title.x = element_text(size = 14,color="black", vjust=-0.35),
axis.title.y = element_text(size = 14,color="black" , vjust=0.35)
) + geom_abline(intercept = mod_shape$coefficients[1], slope = mod_shape$coefficients[2], color="firebrick")
mrlplot(obs, tlim = c(26,32), nt = 20,
p.or.n = FALSE, alpha = 0.05, ylim = NULL,
legend.loc = "bottomleft", main = "Mean Residual Life Plot", xlab = "Threshold u",
ylab = "Mean Excess")
mrlplot(obs, tlim = c(26,31), nt = 20,
p.or.n = FALSE, alpha = 0.05, ylim = NULL,
legend.loc = "bottomleft", try.thresh = u_0, main = "Mean Residual Life Plot", xlab = "Threshold u",
ylab = "Mean Excess")
mod = gpdFit(obs, u = u_0)
V <- mod@fit$varcov
V[1,1] <- mod@fit$varcov[2,2]
V[2,2] <- mod@fit$varcov[1,1]
V
mod@fit$par.ests
mod@fit$par.ses
sig <- mod@fit$par.ests[2]
xi <- mod@fit$par.ests[1]
m <- 10*365
sampl_prop <- length(obs[obs>u_0])/length(obs)
sampl_prop
A <- matrix(rep(0,9),nrow=3,ncol=3)
A[2:3,2:3] <- V
A[1,1] <- sampl_prop*(1-sampl_prop)/length(obs)
A
x_m <- u_0 + (sig/xi)*((m*sampl_prop)^xi -1)
x_m
d_samp <- sig*(m^xi)*(sampl_prop^(xi-1))
d_sig <- (xi^(-1))*(((m*sampl_prop)^xi) -1)
d_xi <- -1*(sig/(xi^2))*(((m*sampl_prop)^xi) -1) + (sig/xi)*((m*sampl_prop)^xi)*log(m*sampl_prop)
grad <- c(d_samp,d_sig,d_xi)
sd_err <- sqrt(t(grad) %*% A %*% grad)
x_m - 1.96 * sd_err
x_m + 1.96 * sd_err
d_samp <- sig*(m^xi)*(sampl_prop^(xi-1))
d_sig <- (xi^(-1))*(((m*sampl_prop)^xi) -1)
d_xi <- -1*(sig/(xi^2))*(((m*sampl_prop)^xi) -1) + (sig/xi)*((m*sampl_prop)^xi)*log(m*sampl_prop)
grad <- c(d_samp,d_sig,d_xi)
sd_err <- sqrt(t(grad) %*% A %*% grad)
x_m - 1.96 * sd_err
x_m + 1.96 * sd_err
1.96*sd_err
sig <- mod@fit$par.ests[2]
xi <- mod@fit$par.ests[1]
m <- 100*365
sampl_prop <- length(obs[obs>u_0])/length(obs)
sampl_prop
A <- matrix(rep(0,9),nrow=3,ncol=3)
A[2:3,2:3] <- V
A[1,1] <- sampl_prop*(1-sampl_prop)/length(obs)
A
x_m <- u_0 + (sig/xi)*((m*sampl_prop)^xi -1)
x_m
d_samp <- sig*(m^xi)*(sampl_prop^(xi-1))
d_sig <- (xi^(-1))*(((m*sampl_prop)^xi) -1)
d_xi <- -1*(sig/(xi^2))*(((m*sampl_prop)^xi) -1) + (sig/xi)*((m*sampl_prop)^xi)*log(m*sampl_prop)
grad <- c(d_samp,d_sig,d_xi)
sd_err <- sqrt(t(grad) %*% A %*% grad)
x_m - 1.96 * sd_err
x_m + 1.96 * sd_err
1.96*sd_err
